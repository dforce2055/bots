{
  "version": 3,
  "sources": ["../../../src/utils/whatsapp.bot.ts"],
  "sourcesContent": ["/* eslint-disable no-console */\n// docs: https://wwebjs.dev/guide/\n// https://docs.wwebjs.dev/index.html\nimport { Chat, Client, Contact, RemoteAuth } from 'whatsapp-web.js'\nimport * as qrcode from 'qrcode-terminal'\nimport { saveChat } from './utils'\nimport { CHAT_TYPE } from '../@types'\n\nexport interface WhatssAppBotConstructor {\n  store: any,\n  clientId: string\n}\nexport class WhatssAppBot {\n  private bot: any\n  client: Client | undefined\n  clientId: string\n  contacts: Contact[] | undefined\n  chats: Chat[] | undefined\n\n  constructor({ store, clientId }: WhatssAppBotConstructor) {\n    this.clientId = clientId || '549' + '2254620036'\n    this.bot = new Client({\n      authStrategy: new RemoteAuth({\n        clientId: clientId,\n        store: store,\n        backupSyncIntervalMs: 60000 // 60000ms = 1 minute 300000\n      })\n    })\n  }\n\n  public async start() {\n    // events listeners\n    this.bot.on('qr', (qr: string) => {\n      qrcode.generate(qr, {small: true})\n    })\n\n    // Save session values to the file upon successful auth\n    this.bot.on('authenticated', async (session: any) => {\n      console.log('Saving session...')\n      // await store.save({ session: clientId })\n    })\n\n    this.bot.on('remote_session_saved', () => {\n      console.log('Remote session saved!!!')\n    })\n    \n    this.bot.on('ready', async() => {\n      console.log('Client is ready!')\n      const chatId = this.clientId + '@c.us'\n      await this.bot?.sendMessage(chatId, '\u00A1Bot ACTIVO!\uD83E\uDDBE\uD83E\uDD16')\n    })\n    \n    this.bot.on('message', async (message: any) => {\n      await saveChat({\n        chat: message,\n        type: CHAT_TYPE.WHATSAPP\n      })\n      if(message.body === '!ping')\n        message.reply('pong')\n  \n      if(message.body.toLowerCase() === 'hola')\n        this.bot?.sendMessage(message.from, 'Hola soy un Bot!\uD83E\uDDBE\uD83E\uDD16')\n    })\n\n    await this.bot?.initialize()\n  }\n\n  async getClient() {\n    return this.client\n  }\n  async sendMessage({ clientId, message }: { clientId: string, message: string }) {\n    if (!message || !clientId)\n      return 'Invalid message or clientId'\n\n    const chatId = clientId + '@c.us'\n    return await this.client?.sendMessage(chatId, message)\n  }\n  async getContacts(): Promise<Contact[]> {\n    if (!this.contacts)\n      this.contacts = await this.client?.getContacts()\n    \n    return this.contacts || []\n  }\n  async getBusinessContacts(): Promise<Contact[]>  {\n    if (!this.contacts)\n      this.contacts = await this.client?.getContacts()\n    \n    const businessContacts = this.contacts?.filter(contact => contact.isBusiness)\n    return businessContacts || []\n  }\n  async getBlockedContacts(): Promise<Contact[]>  {\n    if (!this.contacts)\n      this.contacts = await this.client?.getContacts()\n    \n    const blockedContacts = this.contacts?.filter(contact => contact.isBlocked)\n    return blockedContacts || []\n  }\n  async getFilteredContacsByName(name: string): Promise<Contact[]>  {\n    if (!this.contacts)\n      this.contacts = await this.client?.getContacts()\n    \n    const contacts = this.contacts?.filter(contact => contact.name?.includes(name))\n    return contacts || []\n  }\n  async getChats(): Promise<Chat[]> {\n    if (!this.chats)\n      this.chats = await this.client?.getChats()\n    \n    return this.chats || []\n  }\n  async logout() {\n    return this.client?.logout()\n  }\n}\n\n"],
  "mappings": "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",
  "names": ["_a"]
}
